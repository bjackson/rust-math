#[link(name = "math", vers = "0.01", author = "Brett Jackson")];
#[crate_type = "lib"];


pub fn sin(angle: float) -> float 
{
    return angle - pow(angle,3)/6.0 + pow(angle,5)/120.0 - pow(angle,7)/5040.0 + pow(angle,9)/362880.0 - pow(angle,11)/39916800.0 + pow(angle,13)/6227020800.0 - pow(angle,15)/1307674368000.0;
}

pub fn pow(mantissa: float, exponent: int) -> float 
{
    let mut result = 1.0f;
    let mut count = 0;
    while count < exponent { 
        result = mantissa * result;
        count +=1;
    }
    return result;
}

pub fn factorial(number: int) -> int {
    let mut count = 1;
    let mut result = 1; 
    result = match number {
        0 | 1 => 1,
        number if number < 0 => fail!("Negative integer in factorial prohibited."),
        _ => {
            while count < number {
                count += 1;
                result = result * count;
            } result
        }
    };
    return result;
}

pub fn sqrt(number: float) {
    //caution, may not work for 64-bit integers
    let initial_guess: float = (1 << 29) + ((number as f32) >> 1) - (1 << 22);
    let mut approx = initial_guess;
    for 4.times {
        approx = 0.5*(number/approx + approx);
    }
    return approx;
}

// pub fn newtons_method(number: float, guess: float, iterations: int) {
    
// }